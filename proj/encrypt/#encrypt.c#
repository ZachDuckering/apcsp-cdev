//
// encrypt.c
//

#include <stdio.h>
#include <string.h>
#include <math.h>

#include "encrypt.h"


char CHARS[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
int CHARS_LEN = 62;


char shiftChar(char c, int shift, int direction)
{
  // implement the character shift here:
  //  given a char c shift it either forwards (direction == 1) or backwards (direction == 0)
  //  use the CHARS array above
  //  return the newly shifted char
  //
  // eg.
  //   shiftChar('c', 3, 1) : 'f'
  //   shiftChar('S', 2, 0) : 'Q'
  //   shiftChar('b', 3, 0) : '8'
  char* posptr = strchr(CHARS, c);

  // pos takes on position in string unless it doesn't exist in string
  if(posptr == NULL){
    return c;
  }else{
    int pos = posptr - CHARS;
    if(direction == 1){
      return CHARS[(pos + shift) % CHARS_LEN];
    }else if(direction == 0){
      return CHARS[(pos + CHARS_LEN - shift) % CHARS_LEN];
  }

  }


void encrypt(char str[], int shifts[], int shiftslen)
{
  for (int i = 0; i < strlen(str); i++) 
  {
    char c = str[i];

    str[i] = shiftChar(c, shifts[i%shiftslen], 1);
  }
}


void decrypt(char str[], int shifts[], int shiftslen)
{
  for (int i = 0; i < strlen(str); i++) 
  {
    char c = str[i];

    str[i] = shiftChar(c, shifts[i%shiftslen], 0);
  }
}


void caesarEncrypt(char str[], int shift)
{
  int shifts[] = { shift };
  printf("Plain Text: %s\n", str);
  encrypt(str, shifts, 1);
  printf("Encrypted Text: %s\n", str);
}


void caesarDecrypt(char str[], int shift)
{
  int shifts[] = { shift };
  decrypt(str, shifts, 1);
}


